// –ó–∞–¥–∞—á–∞ 1
// async function asyncTimer(ms) {
// 	let promise = new Promise((resolve) => {
// 		setTimeout(function() {
// 			resolve(`–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä–µ—à–µ–Ω –ø—Ä–æ—à–ª–æ: ${ms / 1000} —Å–µ–∫—É–Ω–¥—ã`)
// 		}, ms)
// 	})

// 	let result = await promise;
// 	console.log(result)
// } 


// asyncTimer(4000);

// –ó–∞–¥–∞—á–∞ 2
// async function runTasksSimultaneously(task){
// 	let promise = Promise.all(task);
// 	let res = await promise;
// 	return res
// }

// const task1 = () => new Promise(res => setTimeout(() => res('Task 1'), 1000));
// const task2 = () => new Promise(res => setTimeout(() => res('Task 2'), 500));

// runTasksSimultaneously([task1(), task2()])
//   .then(res => console.log(res)); // üëâ ["Task 1", "Task 2"] (–ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–µ–∏—Ö)

// –ó–∞–¥–∞—á–∞ 3

async function asyncQueue(tasks){
	for(let task of tasks){
		const res = await task();
		console.log(res)
	}
}


// –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
let tasks = [
    () => new Promise((resolve) => setTimeout(() => resolve("–ó–∞–¥–∞—á–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), 1000)),
    () => new Promise((resolve) => setTimeout(() => resolve("–ó–∞–¥–∞—á–∞ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), 500)),
    () => new Promise((resolve) => setTimeout(() => resolve("–ó–∞–¥–∞—á–∞ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), 1500))
];

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
asyncQueue(tasks);